#! /usr/bin/env python3
from haystack.document_store.elasticsearch import ElasticsearchDocumentStore
from haystack.preprocessor.cleaning import clean_wiki_text
from haystack.retriever.dense import EmbeddingRetriever, DensePassageRetriever
from haystack.pipeline import FAQPipeline
from haystack.preprocessor.utils import convert_files_to_dicts
from haystack.preprocessor import PreProcessor


import logging
import pandas as pd
import datetime
import argparse

parser = argparse.ArgumentParser()
parser.add_argument('--elasticip', type=str, required=True)
parser.add_argument('--filepath', type=str, required=True)
parser.add_argument('--esport', type=str, required=True)
args = parser.parse_args()

logging.info('Initialiazing document store for ATQ..')
document_store_atq = ElasticsearchDocumentStore(host= args.elasticip ,port = 9200, username="", password="",
                            index="nsl_support_document_atq",
                            embedding_dim=768)

all_docs = convert_files_to_dicts(dir_path= "document_atq", clean_func=clean_wiki_text, split_paragraphs=True)

processor = PreProcessor(clean_empty_lines=True,
                        clean_whitespace=True,
                        clean_header_footer=True,
                        split_by="word",
                        split_length=200,
                        split_respect_sentence_boundary=True,
                        split_overlap=0
                        )
docs = processor.process(all_docs)

document_store_atq.write_documents(docs,index="nsl_support_document_atq")

logging.info('retriever_atq object initialised')
retriever_atq = DensePassageRetriever(document_store=document_store_atq, 
                    query_embedding_model="facebook/dpr-question_encoder-single-nq-base",
                    passage_embedding_model="facebook/dpr-ctx_encoder-single-nq-base",
                    use_gpu = False)

document_store_atq.update_embeddings(retriever=retriever_atq,index="nsl_support_document_atq",update_existing_embeddings=False)

logging.info('Embeddings done for ATQ..')


document_store_faq = ElasticsearchDocumentStore(host= args.elasticip, port = 9200, username='', password='',
                                            index='nsl_support_document',
                                            embedding_field='question_emb',
                                            embedding_dim=384, similarity='cosine')


retriever_faq = EmbeddingRetriever(document_store=document_store_faq, embedding_model='sentence-transformers/all-MiniLM-L6-v2', use_gpu=True)

logging.info('retriever_faq object initialised')

df = pd.read_csv(args.filepath)

df.fillna(value='', inplace=True)
df['question'] = df['question'].apply(lambda x: x.strip())
logging.info(df.head())
questions = list(df['question'].values)


df = df.rename(columns={'question': 'text'})

logging.info('docs_to_index_faq creation starts ' + str(datetime.datetime.now()))
docs_to_index_faq = df.to_dict(orient='records')
logging.info('docs_to_index_faq creation ends ' + str(datetime.datetime.now()))
logging.info('writing to elasticsearch usign document_store_faq ' + str(datetime.datetime.now()))
document_store_faq.write_documents(docs_to_index_faq, index='nsl_support_document')
document_store_faq.update_embeddings(retriever=retriever_faq, index = 'nsl_support_document', update_existing_embeddings = False)

logging.info('written to elasticsearch usign document_store_faq ' + str(datetime.datetime.now()))
